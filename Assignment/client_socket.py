# Python 3.6.4
# author: Kim Do Hyeon
# date: 2018.5.28

import socket
import Manage_Crypt
import os
from Crypto.PublicKey import RSA

PUBKEY = b'0\x82\x04\xa5\x02\x01\x00\x02\x82\x01\x01\x00\xe5\xcbp\xa5=\xcb$\x8d@^U\xce\x0f\xe1\xe7"\xee\xd7\x95\x95O\x8d\xaf\xaf\xa4\xbe6F\x8d\xc0\xca \xe2\x18vz\xab*_A\xc7\xa7\xc1\x15`vYB\x192\x13vM#*\xec\xe0\x93\x1a~\xa0\xb5>6\x984,\xbb\xec\x16\xce\xd0\x1a\x83\x89\x9c\x86C\xd7\xa90\x9e\x10\xf3g\xdb\xc3\x88\x90\x9e\xc3\xf5\x89\xbb\xa4\xcf-\x06\x17\x9a=l(G>M{\xf1\xf4)\x9c\x1e\x03\xf0m\xb5^\xda\xe2\xe2r\xcaCS1\xf6\x0b\xa2\x8c\xe7\xcb\xd5\x1eDj\xaf\xa5\x89N\x15\'\xc6\xa0\x13\x86\xa4\xcbK\xec\x1c\xbf\x83\'\xd69\x8c"\x13\xb5Y\xb0\xf9\xdf\x9d\xb8pfQDn&\xad-\x81\x10\xa6\x12\x126]\xd3\x8b\xb2q\x98\xa5C\xc2)h\x08\xa8\x11\x95\x14\xfa\xcbb/\x1f\xc5\xf5\xdc7\x08\xcaN\xbb\tm\x92t\x16)\xca\xad\x9aO!\xad\x94\x804\xdf\x04\x95\x98\xc6\xde\x81\x9c\xed\xa9\xb3\xf1\x80dK\\\x0e\xae\xf6\xfeZ\xca\x05\x8a\x17u\xaa\xefG\xc9\xf3\xaa\x9f\x02\x03\x01\x00\x01\x02\x82\x01\x00\x01\xfa\x8e\xd2\xc2\xc5\xca\xb5\x1e\x01\x1c\x9e\t\xf6\xf9\x05\x8c\xfcJ\xeb\xc99@\x1d\ti\xcb:\x84\xf7\xf7\x05\x9c\xcc\xccu\xb6\x9e\xf1\x1e`\xe3i\xe9\xe45\xc0\xaeX\x072\xb1\xb4m\x01n\x9e\xbf\x1a\xdd\xa2F\xa2\x98-\x16\xad\xedDU\x81\xf1\xba\xce\r(\xf88WUf\xa2\x1b%B\xc2\x05\\\xafZ\x1e\xa2\x86MnX6\\\n\x11\xfd\x9bi&\xb6\x90\xf6=\xee\xcbNC\xd7\xe6\xd7\x1b\x01\x0b\xc3y\r\xb7S}\xc0\xe8\x0c{\x95U\xff\xed\xd6\xdd\x17\'\xd3_]<\x82\xe7\xb3\xaa\n\xd5\x81~54\x05|\xce\x8f[\xecvC\xe1]\x1fA\xa8\xe9\r\x18T[A"c#ky\xd2\xf1\xea\xa3\xfa\x80\x08\xc9\xc3\xde"\xbe\x99b\xf5 \x9d\x17L\x05\xa0\x83\xc9\x04\xf2i\xab\x89\\WG\x14\x13\n.\xac\xdb\x99\x88\xa0\xc8y\x84\x8c\xe7\n5\xb2\x15 k\xc6\rN\xe7J\x17I\xc7\x82]\xcc3k\xe0=JB\x85\x0f\x8dh5$\x0e3\xd7\x11\x1c\xdd_\x91\x02\x81\x81\x00\xecU\x8b\x9bhk]]\x7f\x95j\x8d\x8f3\xb3/g\xcck\xbf(,-\x90\x84Fa\xc8.\x13{\x132\xa2\x18x\x04\x7f\xcd\xf6(\t\xe8\xdf\x08\x82\xd2N\xe9\xf07}$\xd5\xdc\xd9\xf8\x82\x0ca\xa0f\x1dL\x17\xdc\xa4\x10b\x19 \xf9D\xe2\xdd\xd9U\x16\xaa\x9f\xd9z\xd24\xe6(}\xa1\x95\x1b^yt\xcdb\xdaC\x08L\x1a!4!i\x807\x93\xbal\xd3\xe2o\xc6\x8ej!\xdd\xdd\x8a\xc7\xfc\x18\xc5[\xb0\x93#i\x02\x81\x81\x00\xf8\xea\x96\xca\x83`\x13\x1a\xde1N~\x01j\xe6\r,\xcfteI4&\x83\xc7\xa0A\xb1\xb8\xdf\x95M\x9f\x1av:\xb8\x00Dx\xadCN\x12\x83\xfe\x81\x98\x84D\x8f \x83\x8e\x12\x1f"\x9a\x023du1\xb6\x7f\xe1\x06F\xb5\xc4\xb3rH\xa8\x98\xc3\xe1\xa9N\x1a\x1b]\x88E\xbc\xca6\xae\xb6;\x0e\'=Z\xbe\xbc\xd3.&\x96\xff\x14\xf8R\xf5\x8d\xeb3X\x0e<\'`@\xf7\xaf\xb6\x95\xd4\x8c\xb5\xf3\x92\x94\xe1\xa9\x84\xc7\x02\x81\x81\x00\xca\x02\xd9a\x8e\xa0\xef^\xa3V\xc1\x8c\x9d\x12q \x9dV\x03\xe7\x92\xdc(Zvf~\xe0\x90Z\x00\x82\xc9m\xfb\x02c\xbe&\xfc8\xff7y\xa5\x99\xc5P\xc4\xf0\x9bM\xb25\xc8 \xdd%\xb4\x95\xa2x\x86\xa4ke#,\t\xde6\xec;0\xbc\xb7/\xdf?\x1b\x81\xd7Ud\xf836\'\xee\xffE\x03\x06\x8f$\xe72\x13\x1e\x91\xdb=\xe7-y\xf6\x87\xa4\xfb\xaf%\xc7\xabnBT\x0e\x84wC8>\xa8<\x16\xb3\xbe\xb9\x02\x81\x81\x00\xd8\x8c\x85\xe8\xe2\xc8Wv\x9dl\xf9\xe3gjO\x7f\x90\xc7^t\xabm\xe2?\xed\x10\xbfvT\xe6\xb6fT\x0fZb\x15\'\xaei\xea\x1aN\xb6\x8e\xfc\x80Tfe\x9a\xba\xe7\x98V\xad\x9d\x95\xacjwo\xf9r\xd2\xe7\xbae\x13\xc7oq\xf2B2\xbc\xde\xfaB\xc75\x9dvkm%\xe2\xd2\xb6\x18\xc4d`\xdd,h\xeb\xb4\x0f\xc0wd\x0f\xf1dM6\x1cq\xf3\xd8cM:\xd8\x00\x96\xf0\xdc|\x19\xe30W\xb3\xc6\x9d\x8b\x02\x81\x81\x00\x88\x0fq[\xc7Ixu\x93\xdf\x90i\xecZ6\x04(\xfaa\xe5(\xc7\xffn/\x96x\xaf\x88\xed\'\x83\xc3 +\xef\x99\x87Y\x00\xf7iW\x194\xc5b\x9c\x99\x92\xed5A\xc1\xd7\n\x12\xf9\x9dg\x90\xb1#\xb771e\x8cm\x8cX,yR\xfa\xbcM\xd0\xd6D=h\xbc!\t)\xa2\xe6-\xeb\xd0\x10\xe1\xde\x90"\x04\x8b\xf3H\xb3\xb1\xe9\xf1\xdb\x06|\x93\xdc*\x81\x84\x08\\\xa9;\xa8\'\xdd\xaez\xf4\x0c\xf9\xc7\xe0\x0b\x16'
GLO_PUBKEY = RSA.importKey(PUBKEY)

class Netclient:
    def __init__(self):
        self.aeskey = 0
        self.s = socket.socket()
        host = socket.gethostname()
        port = 13545
        self.s.connect((host, port))
        self.aescrypt = 0
        print("Connected to Server")

    def checkserver(self):
        ran_num = os.urandom(16)
        self.s.send(ran_num)
        recev = self.s.recv(1024)
        crypt = Manage_Crypt.RSAmanager()
        de_num = crypt.dec_RSA(recev, GLO_PUBKEY)
        if ran_num != de_num:
            self.s.close()
            return False
        else:
            return True

    def getAESkey(self):
        rsa_crypt = Manage_Crypt.RSAmanager()
        (pri, pub) = rsa_crypt.gen_key()
        (pri, pub) = (pri, pub.exportKey('DER'))
        self.s.send(pub)
        ds = self.s.recv(1024)
        enc_key = self.s.recv(1024)
        dec_ds = rsa_crypt.dec_RSA(ds, GLO_PUBKEY)
        chk_ds = Manage_Crypt.make_sha_key(enc_key)
        if dec_ds != chk_ds:
            return False
        else:
            self.aeskey = rsa_crypt.dec_RSA(enc_key, pri)
            self.aescrypt = Manage_Crypt.AESmanager(self.aeskey)
            return True

    def sendmessage(self, message):
        pack = self.aescrypt.enc_AES(message)
        self.s.send(pack)

    def getmessage(self):
        pack = self.s.recv(1024)
        message = self.aescrypt.dec_AES(pack)
        return message

    def sendpw(self, email, pw):
        self.sendmessage("1")
        self.sendmessage(email + " " + pw)
        chk = self.getmessage()
        print(chk)

    def getpw(self, email):
        self.sendmessage("2")
        self.sendmessage(email)
        chk = self.getmessage()
        print(chk)
        if chk == "Confirm mail":
            num = input("Input Code: ")
            self.sendmessage(str(num))
            pw = self.getmessage()
            print(pw)
        else:
            print("Wrong number")


def test():
    client = Netclient()
    if client.checkserver():
        if client.getAESkey():
            #client.sendpw("kkdh7609@hanmail.net", "!23")
            client.getpw("kkdh7609@hanmail.net")


if __name__ == "__main__":
    test()